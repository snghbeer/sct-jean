import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Filler,
  Legend,
  BarElement,
} from "chart.js";
import { Bar } from "react-chartjs-2";
import { useContext, useEffect, useState } from "react";

import {
  IonCol,
  IonGrid,
  IonHeader,
  IonItem,
  IonRow,
  IonSelect,
  IonSelectOption,
  IonSpinner,
} from "@ionic/react";
import { UserContext } from "./util/SessionContext";

enum ViewMode {
 /*  AllTime, */
  Weekly,
  Monthly,
  Yearly,
}
// Generated by https://quicktype.io
interface ITopSellerCategory {
  categories: Category[];
  monthly: IFrequency;
  weekly: IFrequency;
  yearly: IFrequency;
}
interface IFrequency {
  grouped_products: { [key: string]: GroupedProduct[] };
}
interface Category {
  _id: string;
  name: string;
}
interface GroupedProduct {
  category: string;
  name: string;
  price: number;
  total_sold: number;
}

//
interface ITopSellers {
  weekly: ITopSellersData;
  monthly: ITopSellersData;
  yearly: ITopSellersData;
}
interface ITopSellersData{
  sales:ISalesData[];
  total: number;
}
interface ISalesData{
  amount: number;
  price: number;
  product: string;
}
interface IMonthlySale {
  month: string;
  sales: number;
}
interface IMonthSale {
  week: string;
  sales: number;
}
interface IWeeklySaleProps{
  sales: IWeeklySale[];
  total?: number;
}
interface IWeeklySale {
  day: string;
  sales: number;
}
interface IProductSale {
  product: string;
  price: number;
  amount: number;
}
interface UserToken {
  token: string;
}

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Filler,
  Legend,

  BarElement
);

const dtServer = process.env.REACT_APP_DATA_SERVER_URL;

function TopSellersComponent(props: UserToken) {
  const [categories, setCats] = useState<Category[]>();
  const [selectedCat, setCat] = useState<string>();

  const [dataSales, setDataSalesThisMonth] = useState<ISalesData[] | undefined>();
  const [dataSalesPerCat, setDataSales] = useState<{ [key: string]: GroupedProduct[] } | undefined>();

  const [topSellersData, setTopSellerData] = useState<ITopSellers>();
  const [data2, setData2] = useState<ITopSellerCategory>();

  const [selectedView, setSelectedView] = useState<ViewMode>();

  async function fetchSalesRand() {
    try {
      //Wrong route, this route returns just an array of all time topsellers
      
      const response = await fetch(`${dtServer}/calculate`, {
        method: "GET",
        headers: {
          Authorization: "Bearer " + props.token,
        },
      });
      const data: ITopSellers = await response.json();

      const response2 = await fetch(`${dtServer}/calculate_per_cat`, {
        headers: {
          Authorization: "Bearer " + props.token,
        },
      });
      const data2: ITopSellerCategory = await response2.json();

      setCats(data2.categories);
      setData2(data2);
      setDataSales(data2.weekly.grouped_products);
      setCat(data2.categories[0]._id);

      setTopSellerData(data);
      setDataSalesThisMonth(data.yearly.sales);


    } catch (err) {
      console.error(err);
    }
  }

  function handleViewChange(val: ViewMode) {
    switch (val) {
      case ViewMode.Weekly: {
        setSelectedView(val);
        setDataSalesThisMonth(topSellersData!.weekly.sales);
        setDataSales(data2?.weekly.grouped_products);
        break;
      }
      case ViewMode.Monthly: {
        setSelectedView(val);
        setDataSalesThisMonth(topSellersData!.monthly.sales);
        setDataSales(data2?.monthly.grouped_products);

        break;
      }
      case ViewMode.Yearly: {
        setSelectedView(val);
        setDataSalesThisMonth(topSellersData!.yearly.sales);
        setDataSales(data2?.yearly.grouped_products);

        break;
      }
      default:
        break;
    }
  }

  function handleCategoryChange(val: string) {
    setCat(val);
    switch (selectedView) {
/*       case ViewMode.AllTime: {
        setDataSales(data2?.weekly.grouped_products);
        break;
      } */
      case ViewMode.Weekly: {
        setDataSales(data2?.weekly.grouped_products);
        break;
      }
      case ViewMode.Monthly: {
        setDataSales(data2?.monthly.grouped_products);
        break;
      }
      case ViewMode.Yearly: {
        setDataSales(data2?.yearly.grouped_products);
        break;
      }
      default:
        break;
    }
  }

  useEffect(() => {
    fetchSalesRand();
  }, []);

  //init weekly view as default
  useEffect(() => {
    if(topSellersData) setSelectedView(ViewMode.Weekly)
  }, [topSellersData]);

  return (
    <>
      <div>
        <h1>Top sellers per category</h1>
        <IonRow>
          <IonCol>
            <IonItem>
              <IonSelect
                interface="popover"
                value={selectedView}
                placeholder="Select view"
                onIonChange={(e) =>
                  handleViewChange(e.target.value as ViewMode)
                }
              >
                <IonSelectOption value={ViewMode.Weekly}>
                  Weekly
                </IonSelectOption>
                <IonSelectOption value={ViewMode.Monthly}>
                  Monthly
                </IonSelectOption>
                <IonSelectOption value={ViewMode.Yearly}>
                  Yearly
                </IonSelectOption>
              </IonSelect>
            </IonItem>
          </IonCol>
          <IonCol>
            {categories ? (
              <>
                <IonItem>
                  <IonSelect
                    interface="popover"
                    value={selectedCat}
                    placeholder="Select category"
                    onIonChange={(e) => handleCategoryChange(e.target.value!)}
                  >
                    {categories.map((category, idx) => {
                      return (
                        <IonSelectOption
                          key={idx}
                          value={category._id.toLowerCase()}
                        >
                          {category.name}
                        </IonSelectOption>
                      );
                    })}
                  </IonSelect>
                </IonItem>
              </>
            ) : (
              <></>
            )}
          </IonCol>
        </IonRow>
        <>
          <IonGrid class="ion-padding-top ion-padding">
            <IonRow>
              <IonCol
                style={{ minWidth: "30px", maxWidth: "30px", width: "100%" }}
                size="auto"
              ></IonCol>
              <IonCol sizeMd="6" sizeXs="4">
                <IonHeader>Product</IonHeader>
              </IonCol>
              <IonCol class="ion-text-end">
                <IonHeader>Price (€)</IonHeader>
              </IonCol>
              <IonCol class="ion-text-end">
                <IonHeader> Total sold</IonHeader>
              </IonCol>
            </IonRow>
            {dataSalesPerCat && selectedCat ? (
              <>
                {dataSalesPerCat[selectedCat!]?.map((saleRecord, idx) => {
                  return (
                    <IonRow key={idx}>
                      <IonCol
                        style={{
                          minWidth: "40px",
                          maxWidth: "60px",
                          width: "100%",
                        }}
                        size="auto"
                      >
                        {idx + 1}.{" "}
                      </IonCol>
                      <IonCol sizeMd="6" sizeXs="4">
                        {saleRecord.name}
                      </IonCol>
                      <IonCol class="ion-text-end">{saleRecord.price}</IonCol>
                      <IonCol class="ion-text-end">
                        {saleRecord.total_sold}
                      </IonCol>
                    </IonRow>
                  );
                })}
              </>
            ) : (
              <IonRow class="ion-justify-content-center ion-margin">
                <IonSpinner />
              </IonRow>
            )}
          </IonGrid>
        </>
      </div>
      <div>
        <h1>Top sellers</h1>
        <>
          <IonGrid class="ion-padding-top ion-padding">
            <IonRow>
              <IonCol
                style={{ minWidth: "30px", maxWidth: "30px", width: "100%" }}
                size="auto"
              ></IonCol>
              <IonCol sizeMd="6" sizeXs="4">
                <IonHeader>Product</IonHeader>
              </IonCol>
              <IonCol class="ion-text-end">
                <IonHeader>Price (€)</IonHeader>
              </IonCol>
              <IonCol class="ion-text-end">
                <IonHeader> Total sold</IonHeader>
              </IonCol>
            </IonRow>
            {dataSales ? (
              dataSales?.map((product, idx) => {
                return (
                  <IonRow key={idx}>
                    <IonCol
                      style={{
                        minWidth: "40px",
                        maxWidth: "60px",
                        width: "100%",
                      }}
                      size="auto"
                    >
                      {idx + 1}.{" "}
                    </IonCol>
                    <IonCol sizeMd="6" sizeXs="4">
                      {product.product}
                    </IonCol>
                    <IonCol class="ion-text-end">{product.price}</IonCol>
                    <IonCol class="ion-text-end">{product.amount}</IonCol>
                  </IonRow>
                );
              })
            ) : (
              <IonRow class="ion-justify-content-center ion-margin">
                <IonSpinner />
              </IonRow>
            )}
          </IonGrid>
        </>
      </div>
    </>
  );
}

function MonthlySalesComponent(props: UserToken) {
  const [dataSalesThisYear, setDataSalesThisYear] = useState<
    IMonthlySale[] | undefined
  >();
  const [dataSalesThisMonth, setDataSalesThisMonth] = useState<
    IMonthSale[] | undefined
  >();
  const [dataSalesThisWeek, setDataSalesThisWeek] = useState<IWeeklySaleProps>();
  const [salesThisMonth, setSalesThisYear] = useState();

  async function fetchSales() {
    try {
      
      const response = await fetch(`${dtServer}/sales_this_year`, {
        headers: {
          Authorization: "Bearer " + props.token,
        },
      });
      const data = await response.json();
      console.log(data)
      const currentYearData = data.this_year;
      const currentMonthData = data.this_month;
      const currentMonthWeek = data.this_week;

      setSalesThisYear(currentYearData.total);

      setDataSalesThisWeek(currentMonthWeek)
      setDataSalesThisMonth(currentMonthData.sales);
      setDataSalesThisYear(currentYearData.sales);
    } catch (err) {
      console.error(err);
    }
  }

  useEffect(() => {
    fetchSales();
  }, []);

  const options = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: "top" as const,
      },
      title: {
        display: true,
        text: "Sales this year",
      },
    },
  };

  const options2 = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: "top" as const,
      },
      title: {
        display: true,
        text: "Sales this month",
      },
    },
  };

  const labels = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];

  const dataSet = {
    labels,
    datasets: [
      {
        fill: true,
        label: "Monthly sales",
        data: dataSalesThisYear?.map((month) => month.sales),
        borderColor: "rgb(61, 252, 119)",
        backgroundColor: "rgba(61, 252, 119, 0.5)",
      },
    ],
  };
  const dataSet2 = {
    labels: dataSalesThisMonth?.map((month) => month.week),
    datasets: [
      {
        fill: true,
        label: "Weekly sales",
        data: dataSalesThisMonth?.map((month) => month.sales),
        borderColor: "rgb(235, 64, 52)",
        backgroundColor: "rgba(235, 64, 52, 0.5)",
      },
    ],
  };
  return (
    <>
    {dataSalesThisWeek ?  
    <WeeklySalesComponent sales={dataSalesThisWeek.sales} total={dataSalesThisWeek.total} />  : 
    <></>}
    <div className="ion-padding-bottom ion-padding">
      <h1>
        This month: €{" "}
        {salesThisMonth ? (salesThisMonth as number).toFixed(2) : ""} (netto)
      </h1>

      {dataSalesThisMonth && dataSalesThisYear ? (
        <div className="graphContainer">
          <div className="column1">
            <Bar className="graphContent" options={options2} data={dataSet2} />
          </div>
          <div className="column2">
            <Bar className="graphContent" options={options} data={dataSet} />
          </div>
        </div>
      ) : (
        <></>
      )}
    </div>
    </>
  );
}

function WeeklySalesComponent(props: IWeeklySaleProps) {
  const [dataSales, setDataSalesThisMonth] = useState<IWeeklySale[] | undefined >();
  const [salesThisWeek, setSalesThisWeek] = useState<number | undefined>();

  useEffect(() => {
    console.log(props)
    setSalesThisWeek(props.total)
    setDataSalesThisMonth(props.sales)
  }, []);

  const dayLabels = [
    "Monday",
    "Tuesday",
    "Wednesday",
    "Thursday",
    "Friday",
    "Saturday",
    "Sunday",
  ];

  const options = {
    responsive: true,
    plugins: {
      legend: {
        position: "top" as const,
      },
      title: {
        display: true,
        text: "Sales this week",
      },
    },
  };

  const dataSet = {
    labels: dayLabels,
    datasets: [
      {
        label: "Daily sales",
        data: dataSales?.map((day) => day.sales),
        backgroundColor: "rgba(92, 179, 255, 0.5)",
      },
    ],
  };

  return (
    <div className="ion-padding">
      <h1>
        This week: € {salesThisWeek ? salesThisWeek.toFixed(2) : (0).toFixed(2)}{" "}
        (netto)
      </h1>

      {dataSales ? (
        <Bar className="graphContent" options={options} data={dataSet} />
      ) : (
        <></>
      )}
    </div>
  );
}

function TodaySalesComponent(props: UserToken) {
  const [salesToday, setSalesToday] = useState();
  const [dataSales, setDataSalesThisMonth] = useState<
    IProductSale[] | undefined
  >();

  async function fetchSales() {
    try {
      
      const response = await fetch(`${dtServer}/calculate_today`, {
        headers: {
          Authorization: "Bearer " + props.token,
        },
      });
      const data = await response.json();
      console.log(data)

      setDataSalesThisMonth(data.sales);
      setSalesToday(data.total);
    } catch (err) {
      console.error(err);
    }
  }

  useEffect(() => {
    fetchSales();
  }, []);

  return (
    <div className="ion-padding">
      <h1>
        Sales today: €{" "}
        {salesToday ? (salesToday as number).toFixed(2) : (0).toFixed(2)}{" "}
        (netto)
      </h1>
      {/* shows a realtime table of best sellers of today */}
      {
        <IonGrid class="ion-padding-top">
          <IonRow>
            <IonCol
              style={{ minWidth: "30px", maxWidth: "30px", width: "100%" }}
              size="auto"
            ></IonCol>
            <IonCol sizeMd="6" sizeXs="4">
              <IonHeader>Product</IonHeader>
            </IonCol>
            <IonCol class="ion-text-end">
              <IonHeader>Price (€)</IonHeader>
            </IonCol>
            <IonCol class="ion-text-end">
              <IonHeader> Total sold</IonHeader>
            </IonCol>
          </IonRow>
          {dataSales?.map((product, idx) => {
            return (
              <IonRow key={idx}>
                <IonCol
                  style={{ minWidth: "40px", maxWidth: "60px", width: "100%" }}
                  size="auto"
                >
                  {idx + 1}.{" "}
                </IonCol>
                <IonCol sizeMd="6" sizeXs="4">
                  {product.product}
                </IonCol>
                <IonCol class="ion-text-end">{product.price}</IonCol>
                <IonCol class="ion-text-end">{product.amount}</IonCol>
              </IonRow>
            );
          })}
        </IonGrid>
      }
    </div>
  );
}

export function ChartComponent() {
  const user = useContext(UserContext);

  return (
    <>
      {user ? (
        <div className="ion-padding">
          <TodaySalesComponent token={user?.token!} />
          <MonthlySalesComponent token={user?.token!} />
          <TopSellersComponent token={user?.token!} />
        </div>
      ) : (
        <></>
      )}
    </>
  );
}
